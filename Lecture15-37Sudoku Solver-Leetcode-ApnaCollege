// Have got better understanding of this solution compare to the last one-
class Solution {
    private static boolean helper(char[][] board, int row, int col) {
        if(row==board.length) return true;    // Once your row reaches at board.length(9), it means you have put all the safe numbers in all the columns from 0th to 8th row, so return true as you have got a valid puzzle solution, Congrats!
        
        int currRow = 0;
        int currCol = 0;
        
        if(col==board.length-1) {       // If you already are at 8th col of let's say 3rd row, now where should you go?
        // You should now go to 0th col of 4th row, so currRow=row+1,currCol=0;
            currRow = row+1;
            currCol = 0;
        }
        else {      // Otherwise, just keep going to the next col by col+1;
            currRow = row;
            currCol = col + 1;
        }
        
        if(board[row][col] != '.') {        // If there's already a number kept at a cell, you need not to do anything with that, just call the function recursively for the next column and if it's true as it's valid to have the respective numbers then return true; 
            if(helper(board,currRow,currCol)) return true;   // (If you wonder how row would be equal to board.length eventually or col equals to board.length-1) -> The moment you send currRow as row and currCol as col, the value of both row as well as col is being updated regularly;
        }
        else {   // If there's a '.' at that cell then one by one from 1 to 9 you have to put every number at that cell and check if that's safe to be kept at that cell or not, If not go to next number by looping, if it's safe then put that number in that cell and call for helper function recursively to know if you'll be getting the puzzle solved if you keep this number at this cell, if Yess return true otherwise remove that number from the cell and keep checking for next numbers;
            for(char c='1'; c<='9'; c++) {
                if(isSafe(board,row,col,c)) {   // here, instead of 'currRow,currCol', 'row,col' is used because currRow and currCol has already got the next cells as in it's already managed to go to next row and next col as per requirement but here, we need to check if the current cell is safe for that number to be kept or not, that's why row and col has been used.
                    board[row][col] = c;
                    if(helper(board,currRow,currCol)) return true;
                    else board[row][col] = '.';
                }
            }
        }
        return false;   // If you don't find any number that could be kept safely at the cell, then you must have kept some wrong number at any cell earlier, so go back as earlier recursive calls will be getting false in return so from there again check by putting some other numbers and follow the same process until you don't find a valid puzzle solution;
    }


    private static boolean isSafe(char[][] board, int row, int col, char c) {
        for(int i=0; i<board.length; i++) {
            if(board[i][col]==c) return false;      // To find if that column already have the number or not, if yes there's no point just return false and go to next number to check;

            if(board[row][i]==c) return false;      // Similarly, that row also should not have that number;
        }
        
        /* You can find using different loops, but it's better if we get it using one loop;
        for(int i=0; i<board.length; i++) {
            if(board[row][i]==c) return false;
        }
        */
        
        // Very Important -> By using this formula, you get the starting row no. of the 3X3 grid, by looping from this rowGrid to rowGrid+2, along with colGrid to colGrid+2, you'll find if there's any cell in the 3X3 grid which already have the number;
        int rowGrid = 3 * (row/3);
        int colGrid = 3 * (col/3);
        
        for(int i=rowGrid; i<=rowGrid+2; i++) {
            for(int j=colGrid; j<=colGrid+2; j++) {
                if(board[i][j]==c) return false;
            }
        }
        return true;    // It's absolutely safe to place the current number at the current cell;
    }


    public void solveSudoku(char[][] board) {
        helper(board, 0, 0);    // we have to start from row(0),col(0) to start checking if a number is safe to be kept at that cell or not
    }
}
